@page "/"
@using OOPV_Books.ApiService.Models
@using OOPV_Books.Web.Services
@inject BooksApiClient BooksApi
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>OOPV Books - Home</PageTitle>

<div class="hero-section text-center py-5 mb-4" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 10px;">
    <div class="container">
        <h1 class="display-4 fw-bold mb-3">📚 OOPV Books</h1>
        <p class="lead mb-4">Discover, review, and manage your favorite books</p>
        <div class="d-flex gap-3 justify-content-center">
            <button class="btn btn-light btn-lg" @onclick="NavigateToBooks">
                <span class="bi bi-book me-2"></span>Browse Books
            </button>
            <button class="btn btn-outline-light btn-lg" @onclick="NavigateToAddBook">
                <span class="bi bi-plus me-2"></span>Add Book
            </button>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <h2 class="mb-4">📖 Recent Books</h2>
        @if (recentBooks == null)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!recentBooks.Any())
        {
            <div class="alert alert-info">
                <h5><span class="bi bi-info-circle me-2"></span>No books yet</h5>
                <p class="mb-2">Start building your book collection by adding your first book!</p>
                <button class="btn btn-primary" @onclick="NavigateToAddBook">
                    <span class="bi bi-plus me-1"></span>Add Your First Book
                </button>
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var book in recentBooks.Take(4))
                {
                    <div class="col-md-6 mb-4">
                        <div class="card h-100 shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">@book.Title</h5>
                                <h6 class="card-subtitle mb-2 text-muted">by @book.Author</h6>
                                <p class="card-text">
                                    @(book.Description.Length > 100 ? book.Description.Substring(0, 100) + "..." : book.Description)
                                </p>
                                <div class="d-flex align-items-center mb-2">
                                    @if (book.Reviews.Any())
                                    {
                                        <div class="text-warning me-2">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                @if (i <= book.AverageRating)
                                                {
                                                    <span class="bi bi-star-fill"></span>
                                                }
                                                else
                                                {
                                                    <span class="bi bi-star"></span>
                                                }
                                            }
                                        </div>
                                        <small class="text-muted">(@book.Reviews.Count review(s))</small>
                                    }
                                    else
                                    {
                                        <small class="text-muted">No reviews yet</small>
                                    }
                                </div>
                            </div>
                            <div class="card-footer bg-transparent">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => ViewBook(book.Id)">
                                    <span class="bi bi-eye me-1"></span>View Details
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            @if (recentBooks.Count() > 4)
            {
                <div class="text-center">
                    <button class="btn btn-outline-primary" @onclick="NavigateToBooks">
                        <span class="bi bi-arrow-right me-1"></span>View All @totalBooks Books
                    </button>
                </div>
            }
        }
    </div>
    
    <div class="col-lg-4">
        <div class="card mb-4">
            <div class="card-body text-center">
                <h3 class="card-title">📊 Quick Stats</h3>
                @if (stats != null)
                {
                    <div class="row text-center">
                        <div class="col-6">
                            <div class="stat-item">
                                <h2 class="text-primary mb-0">@stats.TotalBooks</h2>
                                <small class="text-muted">Books</small>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stat-item">
                                <h2 class="text-success mb-0">@stats.TotalReviews</h2>
                                <small class="text-muted">Reviews</small>
                            </div>
                        </div>
                    </div>
                    
                    @if (stats.AverageRating > 0)
                    {
                        <hr>
                        <div class="text-center">
                            <div class="h4 text-warning mb-1">@stats.AverageRating.ToString("F1")</div>
                            <div class="text-warning mb-1">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    @if (i <= stats.AverageRating)
                                    {
                                        <span class="bi bi-star-fill"></span>
                                    }
                                    else
                                    {
                                        <span class="bi bi-star"></span>
                                    }
                                }
                            </div>
                            <small class="text-muted">Average Rating</small>
                        </div>
                    }
                }
            </div>
        </div>
        
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">🚀 Features</h5>
                <ul class="list-unstyled">
                    <li class="mb-2"><span class="bi bi-check-circle-fill text-success me-2"></span>Manage book collection</li>
                    <li class="mb-2"><span class="bi bi-check-circle-fill text-success me-2"></span>Write and read reviews</li>
                    <li class="mb-2"><span class="bi bi-check-circle-fill text-success me-2"></span>Rate books 1-5 stars</li>
                    <li class="mb-2"><span class="bi bi-check-circle-fill text-success me-2"></span>Track reading progress</li>
                    <li class="mb-2"><span class="bi bi-check-circle-fill text-success me-2"></span>Discover new books</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<style>
    .hero-section {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .stat-item {
        padding: 10px 0;
    }
    
    .card {
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
    }
    
    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }
</style>

@code {
    private List<Book>? recentBooks;
    private BookStats? stats;
    private int totalBooks;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            var books = await BooksApi.GetBooksAsync();
            recentBooks = books.OrderByDescending(b => b.Id).ToList();
            totalBooks = books.Count;
            
            // Calculate stats
            var allReviews = books.SelectMany(b => b.Reviews).ToList();
            stats = new BookStats
            {
                TotalBooks = books.Count,
                TotalReviews = allReviews.Count,
                AverageRating = allReviews.Any() ? allReviews.Average(r => r.Rating) : 0
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
            recentBooks = new List<Book>();
            stats = new BookStats();
        }
    }

    private void NavigateToBooks()
    {
        Navigation.NavigateTo("/books");
    }

    private void NavigateToAddBook()
    {
        Navigation.NavigateTo("/books/add");
    }

    private void ViewBook(int bookId)
    {
        Navigation.NavigateTo($"/books/{bookId}");
    }

    public class BookStats
    {
        public int TotalBooks { get; set; }
        public int TotalReviews { get; set; }
        public double AverageRating { get; set; }
    }
}
